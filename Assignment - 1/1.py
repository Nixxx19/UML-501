import numpy as np
import itertools
# (a)
arr = np.array([1, 2, 3, 4, 5])
print("Original array:")
print(arr)
print("Reverse array:")
print(arr[::-1])
# (b)
arr1 = np.array([[1,2,3],[2,4,5],[1,2,3]])
flat1 = arr1.flatten()
print("Original array:")
print(arr1)
print("Flattened array:")
print(flat1)
flat2 = arr1.reshape(-1)
print("Reshaped array:")
print(flat2)
# (c)
arr1 = np.array([[1,2],[3,4]])
arr2 = np.array([[1,2],[3,4]])
print(np.equal(arr1,arr2))
print((arr1 == arr2).all())
# (d)
x = np.array([1,2,3,4,5,1,2,1,1,1])
val_x = np.bincount(x).argmax()
idx_x = np.where(x == val_x)[0]
print(val_x)
print(idx_x)
y = np.array([1,1,1,2,3,4,2,4,3,3])
val_y = np.bincount(y).argmax()
idx_y = np.where(y == val_y)[0]
print(val_y)
print(idx_y)
# (e)
gfg = np.matrix('[4,1,9;12,3,1;4,5,6]')
print(gfg.sum())
print(gfg.sum(axis = 1))
print(gfg.sum(axis = 0))
# (f)
n_array = np.array([[55,25,15],[30,44,2],[11,45,77]])
print(np.trace(n_array))
eigvals = np.linalg.eigvals(n_array)
print(eigvals)
_,eigvecs = np.linalg.eig(n_array)
print(eigvecs)
inv = np.linalg.inv(n_array)
print(inv)
det = np.linalg.det(n_array)
print(det)
# (g)
p = np.array([[1,2],[2,3]])
q = np.array([[4,5],[6,7]])
product1 = np.dot(p,q)
cov1 = np.cov(p,q, rowvar=False)
print(product1)
print(cov1)
p2 = np.array([[1,2],[2,3],[4,5]])
q2 = np.array([[4,5,1],[6,7,2]])
product2 = np.dot(p2,q2)
cov2 = np.cov(p2,q2, rowvar=False)
print(product2)
print(cov2)
# (h)
x = np.array([[2,3,4],[3,2,9]])
y = np.array([[1,5,0],[5,10,3]])
print(np.inner(x,y))
print(np.outer(x.flatten(),y.flatten()))
cartesian = np.array(list(itertools.product(x.flatten(),y.flatten())))
print(cartesian)